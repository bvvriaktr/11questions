{"version":3,"sources":["QuoteList.js","importData.js","App.js","serviceWorker.js","index.js"],"names":["random8","sampleSize","staticQuestions","Question","withStyles","theme","countryItem","width","flag","marginRight","verticalAlign","personItem","paddingLeft","root","backgroundColor","palette","background","paper","overflowY","props","classes","_props$quoteList","quoteList","filteredQuotes","concat","Object","toConsumableArray","react_default","a","createElement","List_default","className","map","quote","index","ListItem_default","key","ListItemText_default","fetchData","fetch","then","rawData","json","get","listContainer","height","_ref","_useState","useState","_useState2","slicedToArray","setQuoteList","useEffect","setInterval","index_es","container","wrap","item","src_QuoteList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","mode","console","log"],"mappings":"oUAOMA,EAAUC,qBAAW,GAsBrBC,EAAkB,CACtB,CAACC,SAAU,sBACX,CAACA,SAAU,6BAiBEC,uBAtCA,SAAAC,GAAK,MAAK,CACvBC,YAAa,CACXC,MAJc,KAMhBC,KAAM,CACJC,YAAa,GACbC,cAAe,UAEjBC,WAAY,CACVC,YAAa,GACbL,MAZc,KAchBM,KAAM,CACJC,gBAAiBT,EAAMU,QAAQC,WAAWC,MAC1CC,UAAW,SACXX,MAAO,UAuBIH,CAdG,SAAAe,GAAS,IACjBC,EAA4BD,EAA5BC,QADiBC,EACWF,EAAnBG,iBADQ,IAAAD,EACI,GADJA,EAEnBE,EAAc,GAAAC,OAAOtB,EAAPuB,OAAAC,EAAA,EAAAD,CAA2BzB,EAAQsB,KACvD,OACEK,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAMG,UAAWX,EAAQP,MACtBU,EAAeS,IAAI,SAACC,EAAOC,GAAR,OAClBP,EAAAC,EAAAC,cAACM,EAAAP,EAAD,CAAUG,UAAWX,EAAQT,WAAYyB,IAAKF,GAC5CP,EAAAC,EAAAC,cAACQ,EAAAT,EAAD,KAAeK,EAAM9B,gBCtClBmC,EAAY,kBAAMC,MAFrB,6FAGTC,KAAK,SAAAC,GAAO,OAAIA,EAAQC,SACxBF,KAAKG,cAAI,UC4BKvC,uBA1BD,CACZwC,cAAe,CACb1B,UAAW,UAEbL,KAAM,CACJgC,OAAQ,QACRtC,MAAO,UAoBIH,CAjBH,SAAA0C,GAAiB,IAAd1B,EAAc0B,EAAd1B,QAAc2B,EACOC,mBAAS,IADhBC,EAAAxB,OAAAyB,EAAA,EAAAzB,CAAAsB,EAAA,GACpBzB,EADoB2B,EAAA,GACTE,EADSF,EAAA,GAQ3B,OALAG,oBAAU,WACRC,YAAY,kBAAMf,IAAYE,KAAKW,IAAe,OAClDb,IAAYE,KAAKW,IAChB,IAGDxB,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAMvB,UAAWX,EAAQP,KAAM0C,WAAS,EAACC,KAAK,UAC5C7B,EAAAC,EAAAC,cAACyB,EAAA,EAAD,CAAMvB,UAAWX,EAAQwB,cAAea,MAAI,GAC1C9B,EAAAC,EAAAC,cAAC6B,EAAD,CAAWpC,UAAWA,QCfVqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtC,EAAAC,EAAAC,cAACqC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/B,KAAK,SAAAgC,GACjCA,EAAaC,eCtHnBlC,MAAM,qGAAsG,CAC1GmC,KAAM,YACLlC,KAAK,kBAAMmC,QAAQC,IAAI","file":"static/js/main.cda9a98f.chunk.js","sourcesContent":["import { sampleSize } from \"lodash/fp\";\nimport React from \"react\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nconst random8 = sampleSize(8);\nconst itemWidth = 400;\n\nconst styles = theme => ({\n  countryItem: {\n    width: itemWidth\n  },\n  flag: {\n    marginRight: 16,\n    verticalAlign: \"middle\"\n  },\n  personItem: {\n    paddingLeft: 30,\n    width: itemWidth\n  },\n  root: {\n    backgroundColor: theme.palette.background.paper,\n    overflowY: \"scroll\",\n    width: \"100%\"\n  }\n});\n\nconst staticQuestions = [\n  {Question: 'Where do you live?'}, \n  {Question: 'Why did you join Riaktr?'}\n]\n\nconst QuoteList = props => {\n  const { classes, quoteList = [] } = props;\n  const filteredQuotes = [...staticQuestions, ...random8(quoteList)];\n  return (\n    <List className={classes.root}>\n      {filteredQuotes.map((quote, index) => (\n        <ListItem className={classes.personItem} key={index}>\n          <ListItemText>{quote.Question}</ListItemText>\n        </ListItem>\n      ))}\n    </List>\n  );\n};\n\nexport default withStyles(styles)(QuoteList);\n","import {get} from 'lodash/fp'\nconst url='https://spreadsheet-parser.herokuapp.com/?id=1aQ48d8wVCJtSoSCPTfYjN0h20Cf3yBxaSu8LRwenSmU';\n\nexport const fetchData = () => fetch(url)\n.then(rawData => rawData.json())\n.then(get('data'));","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { Grid } from \"@material-ui/core\";\nimport QuoteList from \"./QuoteList\";\nimport { fetchData } from \"./importData\";\nimport { withStyles } from \"@material-ui/core/styles\";\n\nconst style = {\n  listContainer: {\n    overflowY: \"scroll\",\n  },\n  root: {\n    height: \"100vh\",\n    width: \"100vw\"\n  }\n};\nconst App = ({ classes }) => {\n  const [quoteList, setQuoteList] = useState([]);\n\n  useEffect(() => {\n    setInterval(() => fetchData().then(setQuoteList), 1000 * 60 * 60 * 6);\n    fetchData().then(setQuoteList);\n  }, []);\n\n  return (\n    <Grid className={classes.root} container wrap=\"nowrap\">\n      <Grid className={classes.listContainer} item>\n        <QuoteList quoteList={quoteList} />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default withStyles(style)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nfetch('https://docs.google.com/spreadsheets/d/1wZrUD8hmwdFtwS2d_OueJp5WvkVRoMGphdKr92Xlcxw/pub?output=csv', {\n  mode: 'no-cors'\n}).then(() => console.log('success'))"],"sourceRoot":""}